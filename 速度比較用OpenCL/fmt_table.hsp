#include "HSPCL64.as"
HCLinit
if HCLGetDevCount()=0:dialog "対応ビデオカードがありません。終了します",1:end


#module
#deffunc _init_ int dgl
	digit_level = dgl
    digitN = 1 << digit_level
	
    MODPARRAY0=60733,400162946,152496387,128390820,98642087,147230239,68832613,189793324,184507149,402028316,347674384,333286101,116670443,372464854,223627686,466071797,27785043,253899102,441396630,301569586,433624589,67609952,25192837,443138433,19610091,469762048,1
    MODPARRAY1=59189,1691398392,255472056,115496270,1572113969,1620372816,1646154746,1224733688,1396251743,659655103,413894177,1018818278,1228360075,389546888,1049531030,1176194496,1553650617,239535518,400579931,1375989542,604217680,1434668375,1152530692,1452317833,1416949424,1811939328,1
    MODPARRAY2=52278,719723363,226232492,895961877,455553081,844007986,603649502,988865942,439511509,1899780963,1781347658,556378134,675198716,1197212322,1577559259,1349859070,168432350,971306119,1947940162,1453957774,1881002012,918899846,740045640,567209306,1801542727,284861408,2013265920,1
    MODP=469762049,1811939329,2013265921
    MODP_WnSqrt=MODPARRAY0.(25-digit_level),MODPARRAY1.(25-digit_level),MODPARRAY2.(26-digit_level)
    MODP_Wn=MODPARRAY0.(26-digit_level),MODPARRAY1.(26-digit_level),MODPARRAY2.(27-digit_level)
	
	gsz = 1 << (digit_level - 1)
	lsz = 256
	if lsz>gsz:lsz=gsz
	gsz2 = digitN
	lsz2 = 256
	if lsz2>gsz2:lsz2=gsz2
	gsz3 = 1 << (digit_level+1)
	lsz3 = 256
	if gsz3<256:lsz3=gsz3
	
	dim_i64 prg,3
	dim_i64 krniFMT,3
	dim_i64 krnuFMT,3
	dim_i64 krnMul_i_i,3
	dim_i64 krnPostNegFMT,3
	dim_i64 krnPreNegFMT,3
	dim_i64 krnDivN,3
	dim_i64 krnPosNeg_To_HiLo,3
	
	prggnr=HCLCreateProgram("garner.cl")
	krngnr=HCLCreateKernel(prggnr,"Garner")

	exist "fmt_table.cl"
	sdim fmtclstr,strsize+1024
	sdim fmtclstr2,strsize+1024
	bload "fmt_table.cl",fmtclstr

		repeat 3
		fmtclstr2="#define MODP ("+MODP.cnt+")\n"+fmtclstr
		bsave "fmt0"+cnt+"_table.cl",fmtclstr2,strlen(fmtclstr2)
		loop	
	wait 5
		repeat 3
		prg.cnt=HCLCreateProgram("fmt0"+cnt+"_table.cl")//オンラインコンパイル
		krniFMT.cnt=HCLCreateKernel(prg.cnt,"iFMT")
		krnuFMT.cnt=HCLCreateKernel(prg.cnt,"uFMT")
		krnMul_i_i.cnt=HCLCreateKernel(prg.cnt,"Mul_i_i")
		krnPostNegFMT.cnt=HCLCreateKernel(prg.cnt,"PostNegFMT")
		krnPreNegFMT.cnt=HCLCreateKernel(prg.cnt,"PreNegFMT")
		krnDivN.cnt=HCLCreateKernel(prg.cnt,"DivN")
		krnPosNeg_To_HiLo.cnt=HCLCreateKernel(prg.cnt,"PosNeg_To_HiLo")
		krnCreateTable.cnt=HCLCreateKernel(prg.cnt,"CreateTabel")
		loop
    mes "MODテーブル生成"
    dim_i64 mtable,3
    dim_i64 mtable_sqrt,3
	    repeat 3
	    mtable.cnt=HCLCreateBuffer(digitN*4)
	    mtable_sqrt.cnt=HCLCreateBuffer(digitN*4*2)
	    loop
    CreateTabel//引数なし関数
	return

#deffunc setpid int inpid
	pid=inpid
	return


#deffunc uFMT var gpuMemA
		repeat digit_level
		HCLSetKrns krnuFMT.pid ,gpuMemA,digit_level-1-cnt,digitN,mtable.pid
		HCLDoKrn1 krnuFMT.pid,gsz,lsz
		loop
    return

#deffunc iFMT var gpuMemA
		repeat digit_level
		HCLSetKrns krniFMT.pid ,gpuMemA,cnt,digitN,mtable.pid
		HCLDoKrn1 krniFMT.pid,gsz,lsz
		loop
    return

#deffunc Mul_i_i var gpuMemA,var gpuMemB
	HCLSetKrns krnMul_i_i.pid ,gpuMemA,gpuMemB
	HCLDoKrn1 krnMul_i_i.pid ,gsz2,lsz2
    return

#deffunc DivN var gpuMemA
	HCLSetKrns krnDivN.pid ,gpuMemA,1<<digit_level
	HCLDoKrn1 krnDivN.pid ,gsz2,lsz2
    return


#deffunc PreNegFMT var gpuMemA,var gpuMemB
	HCLSetKrns krnPreNegFMT.pid,gpuMemA,gpuMemB,1<<digit_level,mtable.pid,MODP_WnSqrt.pid
	HCLDoKrn1 krnPreNegFMT.pid,gsz2,lsz2
	return

#deffunc PostNegFMT var gpuMemA
	HCLSetKrns krnPostNegFMT.pid,gpuMemA,1<<digit_level,mtable.pid,MODP_WnSqrt.pid
	HCLDoKrn1 krnPostNegFMT.pid,gsz2,lsz2
    return

#deffunc PosNeg_To_HiLo var gpuMemE,var gpuMemA,var gpuMemB
	HCLSetKrns krnPosNeg_To_HiLo.pid,gpuMemE,gpuMemA,gpuMemB,1<<digit_level
	HCLDoKrn1 krnPosNeg_To_HiLo.pid,gsz2,lsz2
    return

#deffunc Carrying var E0,var E1,var E2,var Esum
	HCLSetKrns krngnr,E0,E1,E2,Esum,digitN*2
	HCLDoKrn1 krngnr,gsz3,lsz3
	return

#deffunc CreateTabel
	repeat 3
		HCLSetKrns krnCreateTable.cnt,mtable.cnt,mtable_sqrt.cnt,MODP_WnSqrt.cnt
		HCLDoKrn1 krnCreateTable.cnt,gsz2,lsz2
	loop
	return
	
#deffunc Convolution array A,array B,array E
    A_Neg = HCLCreateBuffer(digitN*4)
    B_Neg = HCLCreateBuffer(digitN*4)
	PreNegFMT A.pid,A_Neg
	PreNegFMT B.pid,B_Neg
    
	uFMT A.pid
	uFMT B.pid
	uFMT A_Neg
	uFMT B_Neg
    
	Mul_i_i A.pid,B.pid
	Mul_i_i A_Neg,B_Neg
    
	iFMT B.pid
	iFMT B_Neg
	PostNegFMT B_Neg
	DivN B.pid
	DivN B_Neg
	PosNeg_To_HiLo E.pid,B.pid,B_Neg
	HCLReleaseMemObject A_Neg
	HCLReleaseMemObject B_Neg
    return
#global



*UserDeviceSet//GPU,CPUデバイスを列挙して選べるようなリストを出す
	sdim devstrings,65536
		repeat HCLGetDevCount()
		HCLSetDev cnt
		devstrings+=""+HCLGetDeviceInfo_s(CL_DEVICE_NAME)+"\n"
		loop
	mes "計算に使うデバイスを選んでください"
	objsize 320,32
	combox chkboxdevid,100,devstrings
	mes 

	sdim ketastrings,65536
	mes "計算桁数(4294967296進数)"
		repeat 24
		ketastrings+=""+(1<<(cnt+2))+"\n"
		loop
	objsize 160,32
	chkboxketaid=23
	combox chkboxketaid,100,ketastrings

	pos 100,200
	objsize 280,72
	button goto "計算開始" ,*main
	//実質stop
		repeat -1
		await 16
		loop
	//stop



*main
	screen 0,640,480,0
	HCLSetDev chkboxdevid
	digit_level = chkboxketaid+2
    digitN = 1 << digit_level
    _init_(digit_level)//初期化

    mes "A,Bの要素数="+digitN

	dim host_E,digitN * 2//結果はいるホストメモリ
    gosub*CreateABEvram

    mes "初期値生成"
    gosub*InitializeAB//CPUで初期値生成、GPUにコピー

    mes "OpenCLデバイス計算開始"
    stime = gettime(7)+1000*gettime(6)+60000*gettime(5)

	//畳み込み開始,3つのmod下でやる
		repeat 3
		setpid cnt
		Convolution A,B,E
		mes "進捗"+cnt
		loop

    //ここからgarner&繰り上がり、E.0,E.1,E.2から復元繰り上げしEsumに出力
	Carrying E.0, E.1, E.2 , Esum
	mes "進捗3"

	HCLFinish//デバイスタスクまち命令
	//時間出力
	printtime=gettime(7)+1000*gettime(6)+60000*gettime(5)-stime
	if printtime<0:printtime+=3600000
    mes "OpenCLデバイス計算終了"+printtime+"msec"

	//検算処理へ
	//gosub*ABESave
	//一時ファイル削除
	gosub*TmpFileDelete
	wait 500
	end


*CreateABEvram
    dim_i64 A,3//GPU mem id
    dim_i64 B,3//GPU mem id
    dim_i64 E,3//GPU mem id
	    repeat 3
	    A.cnt=HCLCreateBuffer(digitN*4)
	    B.cnt=HCLCreateBuffer(digitN*4)
	    E.cnt=HCLCreateBuffer(digitN*4*2)
	    loop
	Esum=HCLCreateBuffer(digitN*4*2)//結果はいるデバイスメモリ
	HCLWriteBuffer Esum,host_E,digitN*4*2,0,0 //0初期化
	return

*InitializeAB
	dim host_A,digitN
	dim host_B,digitN
		repeat digitN
		host_A.cnt=(rnd(32768)*2+rnd(2))*32768+rnd(32768)
		host_B.cnt=(rnd(32768)*2+rnd(2))*32768+rnd(32768)
		loop
		repeat 3
		HCLWriteBuffer A.cnt,host_A,digitN*4,0,0//gpuメモリ転送
		HCLWriteBuffer B.cnt,host_B,digitN*4,0,0//gpuメモリ転送
		loop
	return



*ABESave
    HCLReadBuffer Esum,host_E,digitN*4*2,0,0
	mes "ファイルセーブ中"
	bsave "A",host_A
	bsave "B",host_B
	bsave "E",host_E
	return
*TmpFileDelete
	wait 1
	mes "一時ファイル削除"
	delete "fmt00_table.cl"
	delete "fmt01_table.cl"
	delete "fmt02_table.cl"
	mes "終了"
	return